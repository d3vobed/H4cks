package burp;

import burp.api.montoya.MontoyaApi;
import burp.api.montoya.burpextension.BurpExtension;
import burp.api.montoya.http.HttpRequest;
import burp.api.montoya.http.HttpResponse;
import burp.api.montoya.http.listener.HttpListener;
import burp.api.montoya.logging.Logging;

import java.util.List;
import java.util.regex.Pattern;

public class BurpSuiteFilterExtension implements BurpExtension, HttpListener {
    private MontoyaApi api;
    private Logging logging;

    @Override
    public void initialize(MontoyaApi api) {
        this.api = api;
        this.logging = api.logging();

        // Register HTTP listener
        api.http().registerHttpListener(this);

        logging.logToOutput("BurpSuiteFilterExtension initialized.");
    }

    @Override
    public void httpRequestReceived(HttpRequestReceivedEvent event) {
        HttpRequest request = event.getHttpRequest();

        if (isOpenRedirect(request)) {
            logging.logToOutput("Open Redirect detected: " + request.url());
        }
    }

    @Override
    public void httpResponseReceived(HttpResponseReceivedEvent event) {
        HttpResponse response = event.getHttpResponse();

        if (isDomXss(response)) {
            logging.logToOutput("DOM-XSS detected in response to: " + event.getHttpRequest().url());
        }
    }

    private boolean isOpenRedirect(HttpRequest request) {
        // Simple check for common Open Redirect patterns in URL parameters
        List<String> params = request.parameters();
        for (String param : params) {
            if (Pattern.compile("(?i)\\b(https?:\\/\\/|www\\.)\\b").matcher(param).find()) {
                return true;
            }
        }
        return false;
    }

    private boolean isDomXss(HttpResponse response) {
        // Simple check for common DOM-XSS patterns in the response body
        String responseBody = response.body().toString();
        return Pattern.compile("(?i)<script>.*(location|document)\\..*(=|\\+|\\|\\|).*</script>").matcher(responseBody).find();
    }
}
