package burp.api.montoya;

import burp.api.montoya.burpsuite.BurpSuite;
import burp.api.montoya.extension.Extension;
import burp.api.montoya.extension.ExtensionUnloadingHandler;
import burp.api.montoya.http.HttpRequestResponse;
import burp.api.montoya.http.message.HighlightColor;
import burp.api.montoya.http.message.params.HttpParameter;
import burp.api.montoya.proxy.Proxy;
import burp.api.montoya.utilities.Utilities;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class BurpBambda implements Extension, ExtensionUnloadingHandler {

    static class VulnParamGroup {
        final String title;
        final HighlightColor color;
        final String[] parameterNames;

        VulnParamGroup(String title, HighlightColor color, String... parameterNames) {
            this.title = title;
            this.color = color;
            this.parameterNames = parameterNames;
        }
    }

    VulnParamGroup xss = new VulnParamGroup("XSS", HighlightColor.ORANGE, "q", "s", "search", "id", "lang", "keyword", "query", "page", "keywords", "year", "view", "email", "type", "name", "p", "month", "image", "list_type", "url", "terms", "categoryid", "key", "l", "begindate", "enddate");

    boolean highlightEnabled = true;

    HighlightColor multipleVulnColor = HighlightColor.MAGENTA;
    VulnParamGroup[] groups = {xss};
    Set<String> foundParams = new HashSet<>();
    Map<HighlightColor, Integer> colorCounts = new HashMap<>();
    String combinedNotes = "";

    @Override
    public void initialize(BurpSuite api) {
        api.extension().setName("HTTP Smuggling Detector");
        api.proxy().addResponseHandler(this::processProxyMessage);
        api.extension().registerExtensionUnloadingHandler(this);
    }

    public void processProxyMessage(HttpRequestResponse requestResponse) {
        var request = requestResponse.request();
        foundParams.clear();
        colorCounts.clear();

        for (VulnParamGroup group : groups) {
            for (String paramName : group.parameterNames) {
                if (hasParameter(request, paramName)) {
                    if (highlightEnabled) {
                        foundParams.add(group.title + ": " + paramName);
                        colorCounts.put(group.color, colorCounts.getOrDefault(group.color, 0) + 1);
                    }
                    if (!highlightEnabled) {
                        requestResponse.annotations().setHighlightColor(group.color);
                        return;
                    }
                }
            }
        }

        if (!foundParams.isEmpty()) {
            HighlightColor highlightColor = multipleVulnColor;
            if (colorCounts.size() == 1) {
                highlightColor = colorCounts.keySet().iterator().next();
            }
            requestResponse.annotations().setHighlightColor(highlightColor);
            combinedNotes = String.join(", ", foundParams);
            requestResponse.annotations().setNotes(combinedNotes);
        }
    }

    private boolean hasParameter(HttpRequestResponse request, String paramName) {
        for (HttpParameter param : request.parameters()) {
            if (param.name().equalsIgnoreCase(paramName)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void extensionUnloaded() {
    }
}
